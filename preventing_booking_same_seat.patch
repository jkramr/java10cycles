Index: labs/src/main/java/com/juliakram/labs/movietickets/Application.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/Application.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/Application.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -3,9 +3,13 @@
 import com.juliakram.labs.movietickets.orm.dto.Movie;
 import com.juliakram.labs.movietickets.orm.dto.Screen;
 import com.juliakram.labs.movietickets.orm.dto.Show;
+import com.juliakram.labs.movietickets.orm.dto.Ticket;
 import com.juliakram.labs.movietickets.orm.repository.MovieRepository;
 import com.juliakram.labs.movietickets.orm.repository.ScreenRepository;
 import com.juliakram.labs.movietickets.orm.repository.ShowRepository;
+import com.juliakram.labs.movietickets.orm.repository.TicketRepository;
+import com.juliakram.labs.movietickets.util.BookingState;
+import org.springframework.beans.factory.annotation.Autowired;
 import org.springframework.boot.SpringApplication;
 import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
 import org.springframework.context.ConfigurableApplicationContext;
@@ -16,6 +20,8 @@
 import java.time.LocalTime;
 import java.util.LinkedList;
 import java.util.List;
+import java.util.Map;
+import java.util.concurrent.ConcurrentHashMap;
 
 import static com.juliakram.labs.movietickets.util.DateHelper.TODAY;
 import static com.juliakram.labs.movietickets.util.LayoutHelper.imageToByteArray;
@@ -26,11 +32,19 @@
 @EnableAutoConfiguration
 public class Application {
 
+    public static Map<Ticket, BookingState> tickets;
+
+
+    @Autowired
+    private TicketRepository ticketDao;
+
     public static void main(String[] args) throws Exception {
 
         ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);
 
         setUpSchedule(context);
+
+        tickets = new ConcurrentHashMap<>();
     }
 
     private static void setUpSchedule(ConfigurableApplicationContext context) {
\ No newline at end of file
Index: labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Show.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Show.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Show.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -91,9 +91,7 @@
 
         Show show = (Show) o;
 
-        if (!id.equals(show.id)) return false;
-
-        return true;
+        return id.equals(show.id);
     }
 
     @Override
Index: labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Ticket.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Ticket.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/orm/dto/Ticket.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -7,8 +7,8 @@
 /**
  * Created by yuliya.kramarenko on 06.01.2015.
  */
-@Entity
-public class Ticket {
+@Entity(name = "ticket")
+public class Ticket implements Comparable<Ticket> {
 
     @Id
     @GeneratedValue(strategy = SEQUENCE)
@@ -24,6 +24,9 @@
     @Column
     private int seat;
 
+    @Column
+    private boolean confirmed;
+
     public Ticket() {
     }
 
@@ -31,6 +34,7 @@
         this.show = show;
         this.row = row;
         this.seat = seat;
+        this.confirmed = false;
     }
 
     public int getSeat() {
@@ -65,21 +69,37 @@
         this.show = show;
     }
 
+    public boolean isConfirmed() {
+        return confirmed;
+    }
+
+    public void setConfirmed(boolean confirmed) {
+        this.confirmed = confirmed;
+    }
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
         if (!(o instanceof Ticket)) return false;
 
-        Ticket ticket = (Ticket) o;
+        Ticket t = (Ticket) o;
 
-        if (!id.equals(ticket.id)) return false;
+        if(id == null || t.getId() == null){
+            return show.equals(t.getShow())
+                    && row == t.getRow()
+                    && seat == t.getSeat();
+        }
 
-        return true;
+
+        return id.equals(t.id);
     }
 
     @Override
     public int hashCode() {
-        return id.hashCode();
+        int result = show.hashCode();
+        result = 31 * result + row;
+        result = 31 * result + seat;
+        return result;
     }
 
     @Override
@@ -90,5 +110,17 @@
                 ", row=" + row +
                 ", seat=" + seat +
                 '}';
+    }
+
+    @Override
+    public int compareTo(Ticket o) {
+        if (!show.equals(o.getShow())){
+             return show.getMovie().getTitle().compareTo(o.getShow().getMovie().getTitle());
+        }
+
+        if(row != o.getRow()) return row > o.getRow() ? -1: 1;
+        if(seat != o.getSeat()) return seat > o.getSeat() ? -1:1;
+
+        return 0;
     }
 }
Index: labs/src/main/java/com/juliakram/labs/movietickets/orm/repository/TicketRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/orm/repository/TicketRepository.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/orm/repository/TicketRepository.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -10,6 +10,5 @@
  */
 @Repository
 public interface TicketRepository extends JpaRepository<Ticket, Integer> {
-
     Ticket findByShowAndRowAndSeat(Show show, int row, int seat);
 }
Index: labs/src/main/java/com/juliakram/labs/movietickets/util/BookingState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/util/BookingState.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
+++ labs/src/main/java/com/juliakram/labs/movietickets/util/BookingState.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -0,0 +1,5 @@
+package com.juliakram.labs.movietickets.util;
+
+public enum BookingState {
+    STARTED, CONFIRMED
+}
Index: labs/src/main/java/com/juliakram/labs/movietickets/view/Home.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/view/Home.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/view/Home.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -1,5 +1,6 @@
 package com.juliakram.labs.movietickets.view;
 
+import com.juliakram.labs.movietickets.Application;
 import com.juliakram.labs.movietickets.orm.dto.Movie;
 import com.juliakram.labs.movietickets.orm.dto.Screen;
 import com.juliakram.labs.movietickets.orm.dto.Show;
@@ -8,6 +9,7 @@
 import com.juliakram.labs.movietickets.orm.repository.ScreenRepository;
 import com.juliakram.labs.movietickets.orm.repository.ShowRepository;
 import com.juliakram.labs.movietickets.orm.repository.TicketRepository;
+import com.juliakram.labs.movietickets.util.BookingState;
 import com.vaadin.annotations.Theme;
 import com.vaadin.annotations.Title;
 import com.vaadin.server.VaadinRequest;
@@ -18,9 +20,7 @@
 import org.vaadin.spring.VaadinUI;
 
 import java.time.LocalDate;
-import java.util.Date;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
@@ -30,6 +30,7 @@
 import static java.lang.String.format;
 import static java.time.format.DateTimeFormatter.ofPattern;
 
+import static com.juliakram.labs.movietickets.Application.*;
 /**
  * Created by yuliya.kramarenko on 06.01.2015.
  */
@@ -180,7 +181,7 @@
                 show.getTime().format(ofPattern("HH:mm"))));
         bookATicketWindow.center();
 
-        VerticalLayout content = drawScreen(bookATicketWindow, show);
+        VerticalLayout content = drawBookScreen(bookATicketWindow, show);
 
         bookATicketWindow.setContent(content);
 
@@ -199,14 +200,14 @@
         return bookATicketWindow;
     }
 
-    private VerticalLayout drawScreen(Window window, Show show) {
+    private VerticalLayout drawBookScreen(Window window, Show show) {
         VerticalLayout content = new VerticalLayout();
 
         Component poster = drawPoster(show.getMovie(), "300px");
         content.addComponent(poster);
         content.setComponentAlignment(poster, Alignment.TOP_CENTER);
 
-        IntStream.rangeClosed(1, show.getScreen().getRows()).forEach(row -> content.addComponent(drawRow(window, show, row)));
+        IntStream.rangeClosed(1, show.getScreen().getRows()).forEach(row -> content.addComponent(drawBookingRow(window, show, row)));
 
         content.setSpacing(true);
         content.setMargin(true);
@@ -214,7 +215,7 @@
         return content;
     }
 
-    private HorizontalLayout drawRow(Window window, Show show, int row) {
+    private HorizontalLayout drawBookingRow(Window window, Show show, int row) {
         HorizontalLayout rowLayout = new HorizontalLayout();
         Label rowLabel = new Label(row + ":");
         rowLabel.setWidth("25px");
@@ -227,17 +228,39 @@
         return rowLayout;
     }
 
-    private Button drawBookButton(Window window, Show show, int row, int seat) {
+
+    private Button drawBookButton(Window window, final Show show, final int row, final int seat) {
         Button button = new Button(String.valueOf(seat));
         button.addClickListener(new Button.ClickListener() {
             public void buttonClick(Button.ClickEvent event) {
-                UI.getCurrent().addWindow(drawConfirmationWindow(window, show, row, seat));
+                final Ticket notConfirmedTicket = new Ticket(show, row, seat);
+                boolean alreadyBooked = tickets.containsKey(notConfirmedTicket);
+
+                if (!alreadyBooked) {
+                    tickets.put(notConfirmedTicket, BookingState.STARTED);
+
+                    int delay = 20 * 1000; //milliseconds
+                    Timer t = new Timer();
+                    t.schedule(new TimerTask() {
+                        @Override
+                        public void run() {
+                            if(tickets.get(notConfirmedTicket) != BookingState.CONFIRMED){
+                               tickets.remove(notConfirmedTicket);
-            }
+                            }
+                        }
+                    }, delay);
+
+
+                    UI.getCurrent().addWindow(drawConfirmationWindow(window, show, row, seat, notConfirmedTicket));
+                } else {
+                    UI.getCurrent().addWindow(drawTicketBookingFailed(window, show, row, seat));
+                }
+            }
         });
         return button;
     }
 
-    private Window drawConfirmationWindow(Window window, Show show, int row, int seat) {
+    private Window drawConfirmationWindow(Window window, Show show, int row, int seat, Ticket ticket) {
         Window confirmationWindow = new Window(Messages.BOOKING_CONFIRMATION);
         confirmationWindow.center();
 
@@ -261,7 +284,7 @@
         Button confirm = new Button("CONFIRM");
         confirm.addClickListener(new Button.ClickListener() {
             public void buttonClick(Button.ClickEvent event) {
-                Ticket ticket = new Ticket(show, row, seat);
+                tickets.put(ticket, BookingState.CONFIRMED);
                 ticketDao.save(ticket);
                 confirmationWindow.close();
                 window.close();
@@ -270,9 +293,14 @@
         });
 
         Button cancel = new Button("CANCEL");
-        cancel.addClickListener(new Button.ClickListener() {
+        cancel.addClickListener(
+                new Button.ClickListener() {
             public void buttonClick(Button.ClickEvent event) {
+
+                tickets.remove(ticket);
+                window.close();
                 confirmationWindow.close();
+
             }
         });
 
@@ -319,5 +347,34 @@
         content.addComponent(ok);
 
         return ticketBookedWindow;
+    }
+
+
+    private Window drawTicketBookingFailed(Window window, Show show, int row, int seat) {
+        Window errorWindow = new Window(SORRY_NOT_BOOKED);
+
+        errorWindow.center();
+        errorWindow.setClosable(false);
+        errorWindow.setResizable(false);
+        errorWindow.setModal(true);
+
+        VerticalLayout content = new VerticalLayout();
+
+        content.setMargin(true);
+        content.setSpacing(true);
+
+        errorWindow.setContent(content);
+
+        content.addComponent(new Label("Sorry, seat " + seat + " has been already booked"));
+
+        Button ok = new Button("OK");
+        ok.addClickListener(new Button.ClickListener() {
+            public void buttonClick(Button.ClickEvent event) {
+                errorWindow.close();
+            }
+        });
+        content.addComponent(ok);
+
+        return errorWindow;
     }
 }
Index: labs/src/main/java/com/juliakram/labs/movietickets/view/Messages.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- labs/src/main/java/com/juliakram/labs/movietickets/view/Messages.java	(revision 289713d)
+++ labs/src/main/java/com/juliakram/labs/movietickets/view/Messages.java	(revision c3e016f3a7d037c40e145513821cd14c822df2b0)
@@ -16,6 +16,7 @@
     public static final String PICK_A_DATE = "Pick a date:";
     public static final String BOOKING_CONFIRMATION = "Please confirm your booking";
     public static final String THANK_YOU_BOOKED = "Thank you! Your ticket is booked";
+    public static final String SORRY_NOT_BOOKED = "Sorry! Please choose another seat";
     public static final String PLEASE_WRITE_DOWN = "Please write down your booking ID!";
     public static final String DO_YOU_CONFIRM_TICKET = "Do you confirm booking a ticket for %s at %s row: %s seat: %s ?";
     public static final String BOOK_A_TICKET_FOR_MOVIE_AND_TIME = "Book a ticket for %s at %s";
\ No newline at end of file
